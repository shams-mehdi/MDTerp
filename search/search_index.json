{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MDTerp","text":"<p>A python project for interpreting molecular dynamics trajectory metastable state classifications from machine-learning models</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://shams-mehdi.github.io/MDTerp</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"MDTerp/","title":"MDTerp module","text":"<p>Main class for implementing MDTERP</p> Source code in <code>MDTerp/base.py</code> <pre><code>class run:\n    \"\"\"\n    Main class for implementing MDTERP\n    \"\"\"\n    def __init__(self, np_data, model_function_loc, numeric_dict = {}, angle_dict = {}, sin_cos_dict = {}, save_dir = './results/', prob_threshold = 0.48, point_max = 20, num_samples = 5000, cutoff = 25, seed = 0, unfaithfulness_threshold = 0.01):\n\n        # Initializing necessities\n        os.makedirs(save_dir, exist_ok = True)\n        tmp_dir = save_dir + 'tmp/'\n        os.makedirs(tmp_dir, exist_ok = True)\n        logger = log_maker(save_dir)\n        input_summary(logger, numeric_dict, angle_dict, sin_cos_dict, save_dir, np_data)\n\n        # Load Model\n        logger.info('Loading blackbox model &gt;&gt;&gt; ')\n        with open(model_function_loc, 'r') as file:\n            func_code = file.read()\n        local_ns = {}\n        exec(func_code, globals(), local_ns)\n        model_loc, model = local_ns[\"load_model\"]()\n        logger.info(\"Model loaded from location &gt;&gt;&gt; \" + model_loc)\n\n        # Identify transition states for given/training dataset\n        state_probabilities = local_ns[\"run_model\"](model, np_data)\n        points = picker_fn(state_probabilities, prob_threshold, point_max)\n        logger.info(\"Number of state transitions detected &gt;&gt;&gt; \" + str(len(list(points.keys()))))\n        logger.info(\"Probability threshold, maximum number of points per transition &gt;&gt;&gt; \" + str(prob_threshold) + \", \" + str(point_max) )\n        logger.info(100*'-')\n\n        # Loop over all the transitions\n        importance_master = {}\n        for transition in points:\n            logger.info(\"Starting transition &gt;&gt;&gt; \" + transition)\n            for point in range(len(points[transition])):\n                index = points[transition][point]\n                given_indices, indices_names = generate_neighborhood(tmp_dir, numeric_dict, angle_dict, sin_cos_dict, np_data, index, seed, num_samples, selected_features = False)\n                state_probabilities2 = local_ns[\"run_model\"](model, np.load(tmp_dir + 'DATA/make_prediction.npy'))\n                TERP_dat = np.load(tmp_dir + 'DATA/TERP_dat.npy')\n                selected_features = init_model(tmp_dir, TERP_dat, state_probabilities2, cutoff, given_indices, seed)\n\n                generate_neighborhood(tmp_dir, numeric_dict, angle_dict, sin_cos_dict, np_data, index, seed, num_samples, selected_features)\n                state_probabilities3 = local_ns[\"run_model\"](model, np.load(tmp_dir + 'DATA_2/make_prediction.npy'))\n                TERP_dat = np.load(tmp_dir + 'DATA_2/TERP_dat.npy')\n                importance = final_model(tmp_dir, TERP_dat, state_probabilities3, unfaithfulness_threshold, given_indices, selected_features, seed)\n\n                importance_master[index] = [transition, importance]\n                logger.info(\"Generated \" + str(point + 1) + \"/\" + str(len(points[transition])) + \" results!\")\n            logger.info(100*'_')\n\n        np.save(save_dir + 'MDTerp_feature_names.npy', indices_names)\n        with open(save_dir + 'MDTerp_results_all.pkl', 'wb') as f:\n            pickle.dump(importance_master, f)\n\n        logger.info(\"Feature names saved at &gt;&gt;&gt; \" + save_dir + 'MDTerp_feature_names.npy')\n        logger.info(\"All results saved at &gt;&gt;&gt; \" + save_dir + 'MDTerp_results_all.pkl')\n\n\n        shutil.rmtree(tmp_dir)\n        logger.info(\"Completed!!!\")\n\n        # Flush and close logger\n        for handler in logger.handlers[:]:\n            handler.close()\n            logger.removeHandler(handler)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/shams-mehdi/MDTerp/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>MDTerp could always use more documentation, whether as part of the official MDTerp docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/shams-mehdi/MDTerp/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up MDTerp for local development.</p> <ol> <li> <p>Fork the MDTerp repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/MDTerp.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv MDTerp\n$ cd MDTerp/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 MDTerp tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/shams-mehdi/MDTerp/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install MDTerp, run this command in your terminal:</p> <pre><code>pip install MDTerp\n</code></pre> <p>This is the preferred method to install MDTerp, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install MDTerp from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/shams-mehdi/MDTerp\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use MDTerp in a project:</p> <pre><code>import MDTerp\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}